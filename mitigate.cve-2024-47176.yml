---
# according to https://access.redhat.com/security/cve/CVE-2024-47176 this affects RHEL 7, 8, and 9
- name: mitigate CVE-2024-47176 - disable or restrict cups-browsed
  hosts: all
  become: True
  vars:
    real_apply_mitigation: "{{ apply_mitigation | default(True) | bool }}"
    # map service_facts.state to systemd_service.state
    playbook_state_map:
      failed: stopped
      running: started
      stopped: stopped
      unknown: stopped
      inactive: stopped
    # map service_facts.status to systemd_service.enabled
    playbook_status_map:
      enabled: True
      disabled: False
      static: True
      indirect: False
      unknown: False
      masked: False
    # extract current service state and status
    get_current_state: '{{ services["cups-browsed.service"].state | default("stopped") }}'
    get_current_status: '{{ services["cups-browsed.service"].status | default("disabled") }}'
    # convert service state and status to systemd state and enabled
    get_new_state: '{{ "stopped" if real_apply_mitigation else playbook_state_map[get_current_state] | default("stopped") }}'
    get_new_enabled: '{{ False if real_apply_mitigation else playbook_status_map[get_current_status] | default(False) }}'

  handlers: []

  tasks:
    - name: test that we're running on a supported system
      assert:
        that:
        - ansible_distribution == 'RedHat'
        - ansible_distribution_major_version|int >= 7

    - name: Gather the package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: determine if cups-filters is installed
      set_fact:
        dummy: true
      register: cups_filter_installed
      when: "'cups-filters' in ansible_facts.packages"

    # firewalld service files ipp" and "ipp-client" enable 631/udp
    # so a rich rule is required to block it using a higher priority
    - name: mitigation using firewalld
      ansible.posix.firewalld:
        rich_rule: rule priority="-1" port port=631 protocol=udp reject
        permanent: true
        immediate: true
        state: '{{ "enabled" if real_apply_mitigation else "disabled" }}'
      when: cups_filter_installed is not skipped

    - name: get cups-browsed service info
      ansible.builtin.service_facts:

    - name: stop + disable cups-browsed service
      ansible.builtin.systemd_service:
        name: cups-browsed
        state: '{{ get_new_state }}'
        enabled: '{{ get_new_enabled }}'
      when:
        - cups_filter_installed is not skipped

    - name: stop + disable + mask cups-browsed service
      ansible.builtin.systemd_service:
        name: cups-browsed
        state: '{{ get_new_state }}'
        enabled: '{{ get_new_enabled }}'
        masked: '{{ real_apply_mitigation }}'
      when:
        - cups_filter_installed is not skipped
